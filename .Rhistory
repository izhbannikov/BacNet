lkup_seq <- get_xsbasetypes_conversion_lookup("B", "DNA")
library("abind")
library("BiocInstaller")
library("Biobase")
lkup_seq <- get_xsbasetypes_conversion_lookup("B", "DNA")
library("Biostrings")
lkup_seq <- get_xsbasetypes_conversion_lookup("B", "DNA")
ans <- .Call("read_sff","rSFFreader/inst/test/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
library("rSFFreader")
ans <- .Call("read_sff","rSFFreader/inst/test/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
ans <- .Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/test/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
ans <- .Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/test/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
ans <- .Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
new("SffReadsQ",sread=ans[[2]],quality=FastqQuality(ans[[3]]),
qualityClip=ans[[4]],adapterClip=ans[[5]],clipMode="Full",header=ans[[1]])
fix(ans)
fix(lkup_seq)
fix(ans)
debug
lkup_seq <- get_xsbasetypes_conversion_lookup("B", "DNA")
library("Biostrings")
lkup_seq <- get_xsbasetypes_conversion_lookup("B", "DNA")
ans <- .Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
library("rSFFreader")
ans <- .Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
new("SffReadsQ",sread=ans[[2]],quality=FastqQuality(ans[[3]]),
qualityClip=ans[[4]],adapterClip=ans[[5]],clipMode="Full",header=ans[[1]])
ans <- .Call("readsff","/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
ans <- .Call("readsff","/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff",TRUE,c(1), TRUE,"rSFFreader")
ans <- .Call("readsff","/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff",TRUE,TRUE,c(1), TRUE,"rSFFreader")
ans <- readsff(/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff")
ans <- readsff("/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff")
fix(ans)
fix(ans)
readsff("/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff")
lkup_seq <- get_xsbasetypes_conversion_lookup("B", "DNA")
fix(lkup_seq)
fix(lkup_seq)
readsff("/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff")
DNAStringSet("/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff")
DNAStringSet()
DNAStringSet(ans)
DNAStringSet()
show()
show(ans)
detail(ans)
writeFasta(ans, testFasta.fasta)
tables(ans)
sread(ans)
sread(ans,"Raw")
sread(ans,"Full")
fix(ans)
fix(ans)
ans[1]
ans(1)
load("~/bio/app/rSFFreader/R/.RData")
DNA_BASES
DNA_ALPHABET
d <- DNAString("TTGAAAA-CTC-N")
fix(d)
fix(d)
length(d)
alphabet(d)  # DNA_ALPHABET
d <- DNAString("TTGAAAA-N")
alphabet(d)  # DNA_ALPHABET
d <- DNAString("TT")
alphabet(d)  # DNA_ALPHABET
alphabet(d)
b <- BString("I am a BString object")
b
subseq(b)
subseq(b, start=3)
subseq(b, end=-3, width=5)
sread(ans,"Full")
sread(ans,"Full")
readsff("/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff")
sread(ans,"Full")
ans <- .Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/test/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
ans <- Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/test/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
ans <- .Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/test/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
loadIonSampleData
call(loadIonSampleData)
library
library()
library(boot)
library(boot)
library("rSFFreader")
loadIonSampleData
ans <- .Call("read_sff","/home/ilya/bio/app/rSFFreader/inst/extdata/SmallTest.sff",TRUE,lkup_seq, NULL,TRUE,"rSFFreader")
.Call(loadIonSampleData)
.Call(load454SampleData)
ans <-.Call(load454SampleData)
ans <-.Call(load454SampleData())
.Call(readSff(system.file("extdata","Small454Test.sff",package="rSFFreader")))
readSff(system.file("extdata","Small454Test.sff",package="rSFFreader"))
lkup_seq <- get_xsbasetypes_conversion_lookup("B", "DNA")
install.packages("seqinr")
paste(substring(seqs,1,n-1),substring(seqs,2,n), sep = ", "),
")\n");
#!/usr/bin/Rscript
library(seqinr);
data <- sapply(tolower(readLines("de_bruijn_input1.txt")),s2c);
#!/usr/bin/Rscript
#!/usr/bin/Rscript
library(seqinr);
data <- sapply(tolower(readLines("/home/ilya/bio/de_bruijn_input1.txt")),s2c);
datarc <- apply(data,2,function(x){rev(comp(x))});
seqs <- toupper(unique(apply(cbind(data,datarc),2,paste,collapse="")));
n <- nchar(seqs[1]);
out <- paste("(", sep = "",
paste(substring(seqs,1,n-1),substring(seqs,2,n), sep = ", "),
")\n");
cat(out,sep="");
library(seqinr);
data <- sapply(tolower(readLines("/home/ilya/bio/dbru_input2.txt")),s2c);
datarc <- apply(data,2,function(x){rev(comp(x))});
seqs <- toupper(unique(apply(cbind(data,datarc),2,paste,collapse="")));
n <- nchar(seqs[1]);
out <- paste("(", sep = "",
paste(substring(seqs,1,n-1),substring(seqs,2,n), sep = ", "),
")\n");
cat(out,sep="");
#!/usr/bin/Rscript
library(seqinr);
data <- sapply(tolower(readLines("de_bruijn_input1.txt")),s2c);
#!/usr/bin/Rscript
library(seqinr);
data <- sapply(tolower(readLines("~/home/ilya/bio/de_bruijn_input1.txt")),s2c);
datarc <- apply(data,2,function(x){rev(comp(x))});
datarc <- apply(data,2,function(x){rev(comp(x))});
datarc <- apply(data,2,function(x){rev(comp(x))});
#!/usr/bin/Rscript
library(seqinr);
data <- sapply(tolower(readLines("~/bio/de_bruijn_input1.txt")),s2c);
datarc <- apply(data,2,function(x){rev(comp(x))});
seqs <- toupper(unique(apply(cbind(data,datarc),2,paste,collapse="")));
n <- nchar(seqs[1]);
out <- paste("(", sep = "",
paste(substring(seqs,1,n-1),substring(seqs,2,n), sep = ", "),
")\n");
cat(out,sep="");
seqs
out
out[1]
out[1][0]
out[1][1]
paste(substring(seqs,1,n-1),substring(seqs,2,n), sep = ", ")
out <- paste("(", sep = "",
paste(substring(seqs,1,n-1),substring(seqs,2,n), sep = ", "),
")\n");
#cat(out,sep="");
out
data
data <- sapply(tolower(readLines("~/bio/de_bruijn_input1.txt")),s2c);
#!/usr/bin/Rscript
library(seqinr);
data <- sapply(tolower(readLines("~/bio/de_bruijn_input1.txt")),s2c);
data
datarc <- apply(data,2,function(x){rev(comp(x))});
datarc
seqs <- toupper(unique(apply(cbind(data,datarc),2,paste,collapse="")));
seqs
cbind(data,datarc)
apply(cbind(data,datarc),2,paste,collapse="")
unique(apply(cbind(data,datarc),2,paste,collapse=""))
substring(seqs,1,n-1)
substring(seqs,2,n)
out <- paste("(", sep = "",paste(substring(seqs,1,n-1),substring(seqs,2,n), sep = ", "),")\n");
out
cat(out,sep="");
setwd("~/Dropbox/cs576_project/pubmed/")
library(igraph)
network_data<-read.csv("adj_matrix_11.csv", header = T, stringsAsFactors=F, sep=",")
network_data <- network_data[,2:ncol(network_data)]
names(network_data)
bsk.network<-graph.adjacency( network_data )
#plot(bsk.network,layout=layout.kamada.kawai(bsk.network, kkconst = 300),edge.arrow.width = 0, vertex.label.dist=0.5,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
plot(bsk.network,layout=layout.fruchterman.reingold(bsk.network, repulserad=20),edge.arrow.width = 0, vertex.label.dist=0,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
plot(bsk.network,layout=layout.fruchterman.reingold(bsk.network, repulserad=30),edge.arrow.width = 0, vertex.label.dist=0,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
plot(bsk.network,layout=layout.fruchterman.reingold(bsk.network, repulserad=2),edge.arrow.width = 0, vertex.label.dist=0,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
plot(bsk.network,layout=layout.fruchterman.reingold(bsk.network, repulserad=0),edge.arrow.width = 0, vertex.label.dist=0,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
plot(bsk.network,layout=layout.fruchterman.reingold(bsk.network, repulserad=1),edge.arrow.width = 0, vertex.label.dist=0,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
#plot(bsk.network,layout=layout.kamada.kawai(bsk.network, kkconst = 300),edge.arrow.width = 0, vertex.label.dist=0.5,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
plot(bsk.network,layout=layout.fruchterman.reingold(bsk.network, repulserad=10),edge.arrow.width = 0, vertex.label.dist=0,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
network_data<-read.csv("adj_matrix_12.csv", header = T, stringsAsFactors=F, sep=",")
network_data <- network_data[,2:ncol(network_data)]
names(network_data)
bsk.network<-graph.adjacency( network_data )
#plot(bsk.network,layout=layout.kamada.kawai(bsk.network, kkconst = 300),edge.arrow.width = 0, vertex.label.dist=0.5,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
plot(bsk.network,layout=layout.fruchterman.reingold(bsk.network, repulserad=10),edge.arrow.width = 0, vertex.label.dist=0,vertex.frame.color='blue',vertex.label.color='black', vertex.label.font=1, vertex.label=V(bsk.network)$name)
