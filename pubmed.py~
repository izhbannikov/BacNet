# -*- coding:utf8 -*-
#!/usr/bin/env python

import sys
import csv
import networkx as nx
###import matplotlib.pyplot as plt
#from scipy import stats
#from PIL.PixarImagePlugin import size
#from matplotlib.venn import venn3, venn3_circles
###import numpy as np
import fileinput
import pubmed_text_processor as ptp
import getopt
from numpy import array
import math
from xml.dom.minidom import parse
import xml.dom.minidom

bacteria_lst = []
abstracts = []
n = 0
a_matrix = []
a_matrix_words = []

class BacteriaNode :
    bac_name = ""
    Freq = 0

class Abstract :
    ArticleTitle = ""
    AbstractText = ""
    AuthorList = ""
    Year = 1900
    ArticleId = ""
    
def make_bacteria_dict(filename):    # write Fibonacci series up to n
    file = open(filename)
    while 1:
      line = file.readline()
      if not line:
        break
      bnode = BacteriaNode()
      bnode.bac_name = line.strip()
      bacteria_lst.append( bnode )
      global n
      n+=1
      #print line
    #print n	
    
def read_csv(filename) :   
  with open(filename, 'rb') as csvfile:
    abstract_reader = csv.reader(csvfile, delimiter=',', quotechar='"')
    for abstract in abstract_reader:
      abstracts.append(abstract[1])
      #print row[1]

def read_abstracts(filename) :
    tmp_str = ""
    #Counter cnt:
    #cnt = -1 or 0 - skip
    #cnt = 1 - Title
    #cnt = 2 - Authors
    #cnt = 3 - Origins
    #cnt = 4 - text
    #cnt = 5 - PubMed ID
    cnt = -1
    title = ""
    authors = ""
    origins = ""
    text = ""
    for line in fileinput.input([filename]):
        if len(line) == 1 :
            if (cnt == -1) or (cnt == -2) or (cnt == 0):
                cnt +=1
                tmp_str = ""
                continue
            elif cnt == 1 :
                title = tmp_str
                print "Title"
                print title
                cnt += 1
                tmp_str = ""
                continue
            elif cnt == 2 :
                authors = tmp_str
                print "Authors"
                print authors
                cnt += 1
                tmp_str = ""
                continue
            elif cnt == 3 :
                origins = tmp_str
                print "Orig"
                print origins
                cnt += 1
                tmp_str = ""
                continue
            elif cnt == 4 :
                text = tmp_str
                print "Text"
                print text
                cnt += 1
                tmp_str = ""
                continue
            

        if line[:4] == "PMID" :
            tmp_str+=line
            abst = Abstract()
            abst.title = title
            abst.pubmed_id = tmp_str
            pubmed_id = tmp_str
            print "ID"
            print pubmed_id
            abstracts.append(abst)
            tmp_str = ""
            cnt = -2
            #break
        else :
            tmp_str+=line
    
    print len(abstracts)

def make_adj_matrix() :
  for i in xrange(n):
    a_matrix.append([])
    for j in xrange(n):
      a_matrix[i].append(0)
  #print n
  for i in xrange(n) :

    for z in xrange(len(abstracts)) :
      if (abstracts[z].AbstractText.rfind( bacteria_lst[i].bac_name )) != -1 :
        bacteria_lst[i].Freq += 1
        #print bacteria_lst[i].Freq
	for j in xrange(n) :

	 if ((abstracts[z].AbstractText.rfind( bacteria_lst[j].bac_name) != -1)  and (i != j) )  :
	   a_matrix[i][j]+=1
           continue
        
     #continue
    if (bacteria_lst[i].Freq == 0) :
       bacteria_lst[i].Freq = 1
    
    
  #print a_matrix 
  
  

def print_adj_matrix() :
   sss = ""
   for i in xrange(n) :
       sss+= bacteria_lst[i].bac_name.rjust(15)

   print sss.rjust(70) + "\n"
       
   row=0
   col=0
   while row<n:
    col=0
    tstr = ""
    while col<n:
     tstr+= str(a_matrix[row][col]).rjust(15)
     col=col+1
    print bacteria_lst[row].bac_name.ljust(15-len(bacteria_lst[row].bac_name))+tstr + "\n"
    row=row+1
  
def slide_scale(s_array):
    s_scale = []
    
    return s_scale


def make_graph():
   #Before making the graph we have to calculate a node size
   freqs = []
   for b in xrange(n) :
       freqs.append(bacteria_lst[b].Freq)

   fmean = np.mean(freqs,axis=None)
   #print fmean

   G=nx.Graph()

   for b in xrange(n) :
       if bacteria_lst[b].Freq < 15 :
        G.add_node(bacteria_lst[b].bac_name,size=(6000*bacteria_lst[b].Freq/fmean))
       else :
        G.add_node(bacteria_lst[b].bac_name,size=(1000*bacteria_lst[b].Freq/fmean))
   s_array = set([])
   for i in xrange(n) :
       for j in xrange(i) :
           if(a_matrix[i][j] != -1) :
               s_array.add(a_matrix[i][j])
               if a_matrix[i][j] > 100 : #Red
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#FF0000', width=10) #Red
	       elif (a_matrix[i][j] > 80) and (a_matrix[i][j] <= 90) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#FF4500',width=9) #Orange Red
	       elif (a_matrix[i][j] > 70) and (a_matrix[i][j] <= 80) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#FF8C00',width=8) #Dark orange
	       elif (a_matrix[i][j] > 60) and (a_matrix[i][j] <= 70) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#FFFF00',width=7) #Yellow
	       elif (a_matrix[i][j] > 50) and (a_matrix[i][j] <= 60) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#9ACD32',width=6) #Yello green
	       elif (a_matrix[i][j] > 40) and (a_matrix[i][j] <= 50) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#7CFC00',width=5) #Lawn green
	       elif (a_matrix[i][j] > 30) and (a_matrix[i][j] <= 40) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#98FB98',width=4) #Pale green
	       elif (a_matrix[i][j] > 20) and (a_matrix[i][j] <= 30) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#ADD8E6',width=3) #Light blue
	       elif (a_matrix[i][j] > 10) and (a_matrix[i][j] <= 20) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#0000CD',width=2) #Medium blue
               elif (a_matrix[i][j] > 5) and (a_matrix[i][j] <= 10) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='#00008B',width=0.5) #Dark blue
               elif (a_matrix[i][j] <= 5) :
                   G.add_edge(bacteria_lst[i].bac_name,bacteria_lst[j].bac_name,color='blue',width=0)

   
   print sorted(s_array)
   nodsize = []
   for nn,dd in G.nodes_iter(data=True) :
    nodsize.append(dd['size'])


   #print nodsize
   edgewidth=[]
   for (u,v,d) in G.edges(data=True):
        edgewidth.append(G.get_edge_data(u,v)['width'])
        #print G.get_edge_data(u,v)
   
   edgecolor=[]
   for (u,v,d) in G.edges(data=True):
        edgecolor.append(G.get_edge_data(u,v)['color'])

   
   
   pos=nx.graphviz_layout(G)

   pos_lbl = pos
   #for nn,dd in G.nodes_iter(data=True) :
   # pos_lbl[nn][1] += 10
   

   plt.rcParams['text.usetex'] = False
   nx.draw_networkx_nodes(G,pos,node_size=nodsize, node_color='grey')
   nx.draw_networkx_edges(G,pos,width = edgewidth, edge_color = edgecolor)
   nx.draw_networkx_labels(G,pos_lbl,fontsize=16, font_color='w', font_weight='bold')
   plt.axis('off')
   plt.show()



def print_total_freqs() :
    for i in range(n) :
        print bacteria_lst[i].bac_name + ": " + str(bacteria_lst[i].Freq)




def make_venn_diagram() :
    plt.figure(figsize=(10,10))
    v = venn3(subsets=(25, 50, 12, 76, 6, 10, 1 ), set_labels = ('iners', 'crispatus', 'gasseri', 'D'))
   # v.get_patch_by_id('iners').set_alpha(1.0)
   # v.get_patch_by_id('iners').set_color('white')
   # v.get_label_by_id('iners').set_text('Unknown')
    c = venn3_circles(subsets=(25, 50, 12, 76, 6, 10, 1), linestyle='dashed')
    c[0].set_lw(1.0)
    c[0].set_ls('dotted')
    plt.title("Sample Venn diagram")
    #plt.annotate('Unknown set', xy=v.get_label_by_id('100').get_position() - np.array([0, 0.05]), xytext=(-70,-70),
    #            ha='center', textcoords='offset points', bbox=dict(boxstyle='round,pad=0.5', fc='gray', alpha=0.1),
    #            arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0.5',color='gray'))

    plt.axis('off')
    plt.show()

def make_bacteria_dict2(query_filename):
    global bacteria_lst
    file = open(query_filename)
    query_string = ""
    while 1:
      line = file.readline()
      if not line:
        break
      if line[:9] == "query_str" :
          if line[len(line)-1] == "\n" :
            line = line[:-1]
          query_string +=line
          break
      
    query_string = query_string[13:len(query_string)-1]
    query_string.strip()

    temp_list =  query_string.split("[All Fields]")
    tmp_list = []
    for item in temp_list :
        tmp_list.append(item.replace('OR','').replace('AND','').strip())

    tmp_list = set(tmp_list)
    for item in tmp_list :
        if item == '' :
            continue
        bnode = BacteriaNode()
        bnode.bac_name = item
        bacteria_lst.append( bnode )
        global n
        n+=1

    #print bacteria_lst
    print "Given query string: ", query_string



def main(argv):
   
   #Parsing command line arguments:
   try:
      opts, args = getopt.getopt(argv,'a:')
      #print opts
      #print args
   except getopt.GetoptError:
      print 'pubmed.py -a <Approach number>'
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-a':
         if arg == '1' :
            print 'Approach 1 was choosen'
            make_first_approach()
            sys.exit()
         elif arg == '2':
            print 'Approach 2 was choosen'
            make_second_approach()
            sys.exit()
         elif arg == '3':
            print 'Approach 3 was choosen'
            make_3_approach()
            sys.exit()
         
         

   
def make_first_approach():
   #Mining process
   print "Starting mining process..."
   print "Making a list of bacterias..."
   make_bacteria_dict2("pubmed/spiders/pubmed_spider.py") #<- Please do not edit this line
   print "Reading data file..."
   read_abstracts_from_xml("pubmed_result.xml")
   print "Making adjacency matrix..."
   make_adj_matrix()
   print_adj_matrix()
   print "Frequences: "
   print_total_freqs()
   print "Making final network..."
   make_graph()
   #make_venn_diagram()
   print "Done!"

def make_second_approach():
    #Load abstracts
    print "Reading data file..."
    read_abstracts_from_xml("pubmed_result.xml")
    ptp.read_blacklisted_words('blacklisted_words.txt')
    i=0
    for abstract in abstracts :
        ptp.calculate_frequences(abstract.AbstractText)
        #print ptp.bacteria_words
        i+=1
        if i == 100: break

    sorted_bacteria_words = sorted(ptp.bacteria_words.items(), key=lambda x: x[1], reverse = True)
    #print sorted_bacteria_words
    nums = array(ptp.bacteria_words.values())
    max_freq = max(nums)
    for k,v in sorted_bacteria_words :
        if ( v > 2 ) and ( v < max_freq - 3*math.ceil(nums.std()) )  :
            print k + " " + str(v)

    ptp.write_blacklisted_words('blacklisted_words.txt')
    ptp.write_accepted_words('accepted_words.txt')

def make_3_approach():
    #Load abstracts
    print "Reading data file..."
    read_abstracts_from_xml("pubmed_result.xml")
    global abstacts
    i=0
    for abstract in abstracts :
        ptp.calculate_index_words(abstract.AbstractText)
        i+=1
        if i == 1: break

def read_abstracts_from_xml(filename):
    dom = parse(filename)
    Year = 1900
    ArticleTitle = ""
    AbstractText = ""
    AuthorList = ""
    ArticleId = "NA"
    for PubmedArticle in dom.getElementsByTagName('PubmedArticle'):
       AuthorList = ""
       #Publication year
       if len(PubmedArticle.getElementsByTagName('PubDate')[0].getElementsByTagName('Year')) == 0 :
           Year = 1900
       else :
           Year = PubmedArticle.getElementsByTagName('PubDate')[0].getElementsByTagName('Year')[0].firstChild.nodeValue #.encode('utf-8')
           #print Year
       #Publication title
       if len(PubmedArticle.getElementsByTagName('ArticleTitle')) == 0 :
           ArticleTitle = "NA"
       else :
           ArticleTitle = PubmedArticle.getElementsByTagName('ArticleTitle')[0].firstChild.nodeValue.encode('utf-8')
           #print ArticleTitle
       #Publication abstract
       if len(PubmedArticle.getElementsByTagName('AbstractText')) == 0 :
           AbstractText = "NA"
       else :
           AbstractText = PubmedArticle.getElementsByTagName('AbstractText')[0].firstChild.nodeValue.encode('utf-8')
           #print AbstractText
       #AuthorList
       for Author in PubmedArticle.getElementsByTagName('Author') :
           AuthorList += Author.getElementsByTagName('LastName')[0].firstChild.nodeValue.encode('utf-8') + ", "

       if len(PubmedArticle.getElementsByTagName('ArticleId')) < 2 :
           ArticleId = "NA"
       else :
           ArticleId = PubmedArticle.getElementsByTagName('ArticleId')[1].firstChild.nodeValue.encode('utf-8')
           #print ArticleId

       abstract = Abstract()
       abstract.AuthorList = AuthorList
       abstract.Year = Year
       abstract.ArticleId = ArticleId
       abstract.AbstractText = AbstractText
       abstract.ArticleTitle = ArticleTitle
       abstracts.append(abstract)
       #print len(abstracts)

if __name__ == "__main__":
   main(sys.argv[1:])
